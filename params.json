{"name":"Gzll","tagline":"The gzll runtime system","body":"### Welcome to gzll\r\n\r\ngzll is the compute node OS specifically designed for the OpTiMSoC project. It is designed to be portable to other platforms such as Kalray's MPPA or Adapteva's Parellela via a hardware abstraction layer.\r\n\r\nDespite being monolithic, gzll is a very thin layer that essentially has two different system call classes: task management and message passing. The tasks executed on top of gzll can be seen as containers, that communicate via FIFO, similar to dataflow programming.\r\n\r\ngzll uses the OpTiMSoC runtime library (from [the baremetal-libraries repository](http://github.com/optimsoc/baremetal-libraries)) to manage virtual memory and threads. User space libraries are available [in the gzll-libraries repository](http://github.com/optimsoc/gzll-libraries).\r\n\r\nFinally, this repository contains the script for creating an image with the applications, the \"scenario\" (which applications are started where at boot) and the kernel.\r\n\r\n#### Build\r\n\r\nThe build is pretty straight forward. You will need an OpenRISC baremetal toolchain with multicore support from [here](http://openrisc.github.io/newlib). Beside this you need to build and install the OpTiMSoC baremetal libraries from [here](http://optimsoc.github.io/baremetal-libraries). Be sure, you have the `PKG_CONFIG_PATH` environment variable point to the baremetal libraries.\r\n\r\nThen simply run:\r\n\r\n    ./autgen.sh\r\n    mkdir build; cd build\r\n    ../configure --host=or1k-elf --prefix=/opt/optimsoc/gzll\r\n    make\r\n    make install","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}